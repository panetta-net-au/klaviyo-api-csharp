// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Klaviyo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AbTestAction_data_current_experiment : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allocations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.AbTestAction_data_current_experiment_allocations? Allocations { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.AbTestAction_data_current_experiment_allocations Allocations { get; set; }
#endif
        /// <summary>The automatic_winner_selection_settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.AutomaticWinnerSelectionSettings? AutomaticWinnerSelectionSettings { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.AutomaticWinnerSelectionSettings AutomaticWinnerSelectionSettings { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The started property</summary>
        public DateTimeOffset? Started { get; set; }
        /// <summary>The variations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Klaviyo.Models.AbTestAction_data_current_experiment.AbTestAction_data_current_experiment_variations>? Variations { get; set; }
#nullable restore
#else
        public List<global::Klaviyo.Models.AbTestAction_data_current_experiment.AbTestAction_data_current_experiment_variations> Variations { get; set; }
#endif
        /// <summary>The metric to use to determine the winner of the A/B test action.Note that this is different from the metrics used as a flow trigger.</summary>
        public global::Klaviyo.Models.AbTestAction_data_current_experiment_winner_metric? WinnerMetric { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Klaviyo.Models.AbTestAction_data_current_experiment"/> and sets the default values.
        /// </summary>
        public AbTestAction_data_current_experiment()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Klaviyo.Models.AbTestAction_data_current_experiment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Klaviyo.Models.AbTestAction_data_current_experiment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Klaviyo.Models.AbTestAction_data_current_experiment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allocations", n => { Allocations = n.GetObjectValue<global::Klaviyo.Models.AbTestAction_data_current_experiment_allocations>(global::Klaviyo.Models.AbTestAction_data_current_experiment_allocations.CreateFromDiscriminatorValue); } },
                { "automatic_winner_selection_settings", n => { AutomaticWinnerSelectionSettings = n.GetObjectValue<global::Klaviyo.Models.AutomaticWinnerSelectionSettings>(global::Klaviyo.Models.AutomaticWinnerSelectionSettings.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "started", n => { Started = n.GetDateTimeOffsetValue(); } },
                { "variations", n => { Variations = n.GetCollectionOfObjectValues<global::Klaviyo.Models.AbTestAction_data_current_experiment.AbTestAction_data_current_experiment_variations>(global::Klaviyo.Models.AbTestAction_data_current_experiment.AbTestAction_data_current_experiment_variations.CreateFromDiscriminatorValue)?.AsList(); } },
                { "winner_metric", n => { WinnerMetric = n.GetEnumValue<global::Klaviyo.Models.AbTestAction_data_current_experiment_winner_metric>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Klaviyo.Models.AbTestAction_data_current_experiment_allocations>("allocations", Allocations);
            writer.WriteObjectValue<global::Klaviyo.Models.AutomaticWinnerSelectionSettings>("automatic_winner_selection_settings", AutomaticWinnerSelectionSettings);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteDateTimeOffsetValue("started", Started);
            writer.WriteCollectionOfObjectValues<global::Klaviyo.Models.AbTestAction_data_current_experiment.AbTestAction_data_current_experiment_variations>("variations", Variations);
            writer.WriteEnumValue<global::Klaviyo.Models.AbTestAction_data_current_experiment_winner_metric>("winner_metric", WinnerMetric);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Klaviyo.Models.SendEmailAction"/>, <see cref="global::Klaviyo.Models.SendSmsAction"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AbTestAction_data_current_experiment_variations : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.SendEmailAction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.SendEmailAction? SendEmailAction { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.SendEmailAction SendEmailAction { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.SendSmsAction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.SendSmsAction? SendSmsAction { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.SendSmsAction SendSmsAction { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Klaviyo.Models.AbTestAction_data_current_experiment.AbTestAction_data_current_experiment_variations"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Klaviyo.Models.AbTestAction_data_current_experiment.AbTestAction_data_current_experiment_variations CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Klaviyo.Models.AbTestAction_data_current_experiment.AbTestAction_data_current_experiment_variations();
                if("SendEmailAction".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SendEmailAction = new global::Klaviyo.Models.SendEmailAction();
                }
                else if("SendSmsAction".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SendSmsAction = new global::Klaviyo.Models.SendSmsAction();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SendEmailAction != null)
                {
                    return SendEmailAction.GetFieldDeserializers();
                }
                else if(SendSmsAction != null)
                {
                    return SendSmsAction.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(SendEmailAction != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.SendEmailAction>(null, SendEmailAction);
                }
                else if(SendSmsAction != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.SendSmsAction>(null, SendSmsAction);
                }
            }
        }
    }
}
#pragma warning restore CS0618
