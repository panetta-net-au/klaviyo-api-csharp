// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Klaviyo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MetricAggregateQueryResourceObject_attributes : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Optional attribute(s) used for partitioning by the aggregation function</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_by?>? By { get; set; }
#nullable restore
#else
        public List<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_by?> By { get; set; }
#endif
        /// <summary>List of filters, must include time range using ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).            These filters follow a similar format to those in `GET` requests, the primary difference is that this endpoint asks for a list.            The time range can be filtered by providing a `greater-or-equal` and a `less-than` filter on the `datetime` field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Filter { get; set; }
#nullable restore
#else
        public List<string> Filter { get; set; }
#endif
        /// <summary>Aggregation interval, e.g. &quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;</summary>
        public global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_interval? Interval { get; set; }
        /// <summary>Measurement key, e.g. `unique`, `sum_value`, `count`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_measurements?>? Measurements { get; set; }
#nullable restore
#else
        public List<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_measurements?> Measurements { get; set; }
#endif
        /// <summary>The metric ID used in the aggregation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetricId { get; set; }
#nullable restore
#else
        public string MetricId { get; set; }
#endif
        /// <summary>Optional pagination cursor to iterate over large result sets</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PageCursor { get; set; }
#nullable restore
#else
        public string PageCursor { get; set; }
#endif
        /// <summary>Alter the maximum number of returned rows in a single page of aggregation results</summary>
        public int? PageSize { get; set; }
        /// <summary>Provide fields to limit the returned data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ReturnFields { get; set; }
#nullable restore
#else
        public List<string> ReturnFields { get; set; }
#endif
        /// <summary>Provide a sort key (e.g. -$message)</summary>
        public global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_sort? Sort { get; set; }
        /// <summary>The timezone used for processing the query, e.g. `&apos;America/New_York&apos;`.            This field is validated against a list of common timezones from the [IANA Time Zone Database](https://www.iana.org/time-zones).            While most are supported, a few notable exceptions are `Factory`, `Europe/Kyiv` and `Pacific/Kanton`. This field is case-sensitive.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes"/> and sets the default values.
        /// </summary>
        public MetricAggregateQueryResourceObject_attributes()
        {
            AdditionalData = new Dictionary<string, object>();
            Interval = global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_interval.Day;
            Timezone = "UTC";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "by", n => { By = n.GetCollectionOfEnumValues<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_by>()?.AsList(); } },
                { "filter", n => { Filter = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "interval", n => { Interval = n.GetEnumValue<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_interval>(); } },
                { "measurements", n => { Measurements = n.GetCollectionOfEnumValues<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_measurements>()?.AsList(); } },
                { "metric_id", n => { MetricId = n.GetStringValue(); } },
                { "page_cursor", n => { PageCursor = n.GetStringValue(); } },
                { "page_size", n => { PageSize = n.GetIntValue(); } },
                { "return_fields", n => { ReturnFields = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "sort", n => { Sort = n.GetEnumValue<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_sort>(); } },
                { "timezone", n => { Timezone = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_by>("by", By);
            writer.WriteCollectionOfPrimitiveValues<string>("filter", Filter);
            writer.WriteEnumValue<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_interval>("interval", Interval);
            writer.WriteCollectionOfEnumValues<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_measurements>("measurements", Measurements);
            writer.WriteStringValue("metric_id", MetricId);
            writer.WriteStringValue("page_cursor", PageCursor);
            writer.WriteIntValue("page_size", PageSize);
            writer.WriteCollectionOfPrimitiveValues<string>("return_fields", ReturnFields);
            writer.WriteEnumValue<global::Klaviyo.Models.MetricAggregateQueryResourceObject_attributes_sort>("sort", Sort);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
