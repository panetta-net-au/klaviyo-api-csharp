// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Klaviyo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class FlowPushNotification : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The additional_filters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.FlowPushNotification_additional_filters? AdditionalFilters { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.FlowPushNotification_additional_filters AdditionalFilters { get; set; }
#endif
        /// <summary>The android_link property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AndroidLink { get; set; }
#nullable restore
#else
        public string AndroidLink { get; set; }
#endif
        /// <summary>The badge property</summary>
        public bool? Badge { get; set; }
        /// <summary>The body property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Body { get; set; }
#nullable restore
#else
        public string Body { get; set; }
#endif
        /// <summary>The conversion_metric_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConversionMetricId { get; set; }
#nullable restore
#else
        public string ConversionMetricId { get; set; }
#endif
        /// <summary>A dynamic image asset to include in the push notification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DynamicImage { get; set; }
#nullable restore
#else
        public string DynamicImage { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The id of an ImageAsset. If provided, this will take precedence over a dynamic_image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageId { get; set; }
#nullable restore
#else
        public string ImageId { get; set; }
#endif
        /// <summary>The ios_link property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IosLink { get; set; }
#nullable restore
#else
        public string IosLink { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>See PushLinkAction in app.This is not a flow action, but the literal action that should betaken when the push notification is tapped.</summary>
        public global::Klaviyo.Models.FlowPushNotification_on_open? OnOpen { get; set; }
        /// <summary>The smart_sending_enabled property</summary>
        public bool? SmartSendingEnabled { get; set; }
        /// <summary>The sound property</summary>
        public bool? Sound { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Klaviyo.Models.FlowPushNotification"/> and sets the default values.
        /// </summary>
        public FlowPushNotification()
        {
            AdditionalData = new Dictionary<string, object>();
            OnOpen = global::Klaviyo.Models.FlowPushNotification_on_open.Home;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Klaviyo.Models.FlowPushNotification"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Klaviyo.Models.FlowPushNotification CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Klaviyo.Models.FlowPushNotification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "additional_filters", n => { AdditionalFilters = n.GetObjectValue<global::Klaviyo.Models.FlowPushNotification_additional_filters>(global::Klaviyo.Models.FlowPushNotification_additional_filters.CreateFromDiscriminatorValue); } },
                { "android_link", n => { AndroidLink = n.GetStringValue(); } },
                { "badge", n => { Badge = n.GetBoolValue(); } },
                { "body", n => { Body = n.GetStringValue(); } },
                { "conversion_metric_id", n => { ConversionMetricId = n.GetStringValue(); } },
                { "dynamic_image", n => { DynamicImage = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "image_id", n => { ImageId = n.GetStringValue(); } },
                { "ios_link", n => { IosLink = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "on_open", n => { OnOpen = n.GetEnumValue<global::Klaviyo.Models.FlowPushNotification_on_open>(); } },
                { "smart_sending_enabled", n => { SmartSendingEnabled = n.GetBoolValue(); } },
                { "sound", n => { Sound = n.GetBoolValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Klaviyo.Models.FlowPushNotification_additional_filters>("additional_filters", AdditionalFilters);
            writer.WriteStringValue("android_link", AndroidLink);
            writer.WriteBoolValue("badge", Badge);
            writer.WriteStringValue("body", Body);
            writer.WriteStringValue("conversion_metric_id", ConversionMetricId);
            writer.WriteStringValue("dynamic_image", DynamicImage);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("image_id", ImageId);
            writer.WriteStringValue("ios_link", IosLink);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Klaviyo.Models.FlowPushNotification_on_open>("on_open", OnOpen);
            writer.WriteBoolValue("smart_sending_enabled", SmartSendingEnabled);
            writer.WriteBoolValue("sound", Sound);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
