// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Klaviyo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MobilePushBadge : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Badge options</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.MobilePushBadge.MobilePushBadge_badge_options? BadgeOptions { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.MobilePushBadge.MobilePushBadge_badge_options BadgeOptions { get; set; }
#endif
        /// <summary>Whether to display a badge on the app icon</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Display { get; set; }
#nullable restore
#else
        public UntypedNode Display { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Klaviyo.Models.MobilePushBadge"/> and sets the default values.
        /// </summary>
        public MobilePushBadge()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Klaviyo.Models.MobilePushBadge"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Klaviyo.Models.MobilePushBadge CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Klaviyo.Models.MobilePushBadge();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "badge_options", n => { BadgeOptions = n.GetObjectValue<global::Klaviyo.Models.MobilePushBadge.MobilePushBadge_badge_options>(global::Klaviyo.Models.MobilePushBadge.MobilePushBadge_badge_options.CreateFromDiscriminatorValue); } },
                { "display", n => { Display = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Klaviyo.Models.MobilePushBadge.MobilePushBadge_badge_options>("badge_options", BadgeOptions);
            writer.WriteObjectValue<UntypedNode>("display", Display);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Klaviyo.Models.Increment"/>, <see cref="global::Klaviyo.Models.Property"/>, <see cref="global::Klaviyo.Models.StaticCount"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MobilePushBadge_badge_options : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.Increment"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.Increment? Increment { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.Increment Increment { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.Property"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.Property? Property { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.Property Property { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.StaticCount"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.StaticCount? StaticCount { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.StaticCount StaticCount { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Klaviyo.Models.MobilePushBadge.MobilePushBadge_badge_options"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Klaviyo.Models.MobilePushBadge.MobilePushBadge_badge_options CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Klaviyo.Models.MobilePushBadge.MobilePushBadge_badge_options();
                if("Increment".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Increment = new global::Klaviyo.Models.Increment();
                }
                else if("Property".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.Property = new global::Klaviyo.Models.Property();
                }
                else if("StaticCount".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.StaticCount = new global::Klaviyo.Models.StaticCount();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Increment != null)
                {
                    return Increment.GetFieldDeserializers();
                }
                else if(Property != null)
                {
                    return Property.GetFieldDeserializers();
                }
                else if(StaticCount != null)
                {
                    return StaticCount.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Increment != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.Increment>(null, Increment);
                }
                else if(Property != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.Property>(null, Property);
                }
                else if(StaticCount != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.StaticCount>(null, StaticCount);
                }
            }
        }
    }
}
#pragma warning restore CS0618
