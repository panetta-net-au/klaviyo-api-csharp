// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Klaviyo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ReviewStatusRejected : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The updated status intended for the review with this ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.ReviewStatusRejected.ReviewStatusRejected_rejection_reason? RejectionReason { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.ReviewStatusRejected.ReviewStatusRejected_rejection_reason RejectionReason { get; set; }
#endif
        /// <summary>The value property</summary>
        public global::Klaviyo.Models.RejectedEnum? Value { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Klaviyo.Models.ReviewStatusRejected"/> and sets the default values.
        /// </summary>
        public ReviewStatusRejected()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Klaviyo.Models.ReviewStatusRejected"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Klaviyo.Models.ReviewStatusRejected CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Klaviyo.Models.ReviewStatusRejected();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "rejection_reason", n => { RejectionReason = n.GetObjectValue<global::Klaviyo.Models.ReviewStatusRejected.ReviewStatusRejected_rejection_reason>(global::Klaviyo.Models.ReviewStatusRejected.ReviewStatusRejected_rejection_reason.CreateFromDiscriminatorValue); } },
                { "value", n => { Value = n.GetEnumValue<global::Klaviyo.Models.RejectedEnum>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Klaviyo.Models.ReviewStatusRejected.ReviewStatusRejected_rejection_reason>("rejection_reason", RejectionReason);
            writer.WriteEnumValue<global::Klaviyo.Models.RejectedEnum>("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Klaviyo.Models.RejectReasonFake"/>, <see cref="global::Klaviyo.Models.RejectReasonMisleading"/>, <see cref="global::Klaviyo.Models.RejectReasonOther"/>, <see cref="global::Klaviyo.Models.RejectReasonPrivateInformation"/>, <see cref="global::Klaviyo.Models.RejectReasonProfanity"/>, <see cref="global::Klaviyo.Models.RejectReasonUnrelated"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReviewStatusRejected_rejection_reason : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RejectReasonFake"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RejectReasonFake? RejectReasonFake { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RejectReasonFake RejectReasonFake { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RejectReasonMisleading"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RejectReasonMisleading? RejectReasonMisleading { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RejectReasonMisleading RejectReasonMisleading { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RejectReasonOther"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RejectReasonOther? RejectReasonOther { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RejectReasonOther RejectReasonOther { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RejectReasonPrivateInformation"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RejectReasonPrivateInformation? RejectReasonPrivateInformation { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RejectReasonPrivateInformation RejectReasonPrivateInformation { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RejectReasonProfanity"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RejectReasonProfanity? RejectReasonProfanity { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RejectReasonProfanity RejectReasonProfanity { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RejectReasonUnrelated"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RejectReasonUnrelated? RejectReasonUnrelated { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RejectReasonUnrelated RejectReasonUnrelated { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Klaviyo.Models.ReviewStatusRejected.ReviewStatusRejected_rejection_reason"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Klaviyo.Models.ReviewStatusRejected.ReviewStatusRejected_rejection_reason CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Klaviyo.Models.ReviewStatusRejected.ReviewStatusRejected_rejection_reason();
                if("RejectReasonFake".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RejectReasonFake = new global::Klaviyo.Models.RejectReasonFake();
                }
                else if("RejectReasonMisleading".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RejectReasonMisleading = new global::Klaviyo.Models.RejectReasonMisleading();
                }
                else if("RejectReasonOther".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RejectReasonOther = new global::Klaviyo.Models.RejectReasonOther();
                }
                else if("RejectReasonPrivateInformation".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RejectReasonPrivateInformation = new global::Klaviyo.Models.RejectReasonPrivateInformation();
                }
                else if("RejectReasonProfanity".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RejectReasonProfanity = new global::Klaviyo.Models.RejectReasonProfanity();
                }
                else if("RejectReasonUnrelated".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RejectReasonUnrelated = new global::Klaviyo.Models.RejectReasonUnrelated();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(RejectReasonFake != null)
                {
                    return RejectReasonFake.GetFieldDeserializers();
                }
                else if(RejectReasonMisleading != null)
                {
                    return RejectReasonMisleading.GetFieldDeserializers();
                }
                else if(RejectReasonOther != null)
                {
                    return RejectReasonOther.GetFieldDeserializers();
                }
                else if(RejectReasonPrivateInformation != null)
                {
                    return RejectReasonPrivateInformation.GetFieldDeserializers();
                }
                else if(RejectReasonProfanity != null)
                {
                    return RejectReasonProfanity.GetFieldDeserializers();
                }
                else if(RejectReasonUnrelated != null)
                {
                    return RejectReasonUnrelated.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(RejectReasonFake != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RejectReasonFake>(null, RejectReasonFake);
                }
                else if(RejectReasonMisleading != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RejectReasonMisleading>(null, RejectReasonMisleading);
                }
                else if(RejectReasonOther != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RejectReasonOther>(null, RejectReasonOther);
                }
                else if(RejectReasonPrivateInformation != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RejectReasonPrivateInformation>(null, RejectReasonPrivateInformation);
                }
                else if(RejectReasonProfanity != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RejectReasonProfanity>(null, RejectReasonProfanity);
                }
                else if(RejectReasonUnrelated != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RejectReasonUnrelated>(null, RejectReasonUnrelated);
                }
            }
        }
    }
}
#pragma warning restore CS0618
