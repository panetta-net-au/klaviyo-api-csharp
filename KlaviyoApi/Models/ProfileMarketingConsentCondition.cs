// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Klaviyo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ProfileMarketingConsentCondition : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The consent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.ProfileMarketingConsentCondition.ProfileMarketingConsentCondition_consent? Consent { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.ProfileMarketingConsentCondition.ProfileMarketingConsentCondition_consent Consent { get; set; }
#endif
        /// <summary>The type property</summary>
        public global::Klaviyo.Models.ProfileMarketingConsentEnum? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Klaviyo.Models.ProfileMarketingConsentCondition"/> and sets the default values.
        /// </summary>
        public ProfileMarketingConsentCondition()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Klaviyo.Models.ProfileMarketingConsentCondition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Klaviyo.Models.ProfileMarketingConsentCondition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Klaviyo.Models.ProfileMarketingConsentCondition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "consent", n => { Consent = n.GetObjectValue<global::Klaviyo.Models.ProfileMarketingConsentCondition.ProfileMarketingConsentCondition_consent>(global::Klaviyo.Models.ProfileMarketingConsentCondition.ProfileMarketingConsentCondition_consent.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Klaviyo.Models.ProfileMarketingConsentEnum>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Klaviyo.Models.ProfileMarketingConsentCondition.ProfileMarketingConsentCondition_consent>("consent", Consent);
            writer.WriteEnumValue<global::Klaviyo.Models.ProfileMarketingConsentEnum>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Klaviyo.Models.HasEmailMarketingConsent"/>, <see cref="global::Klaviyo.Models.HasPushMarketingConsent"/>, <see cref="global::Klaviyo.Models.HasSMSMarketingConsent"/>, <see cref="global::Klaviyo.Models.NoEmailMarketingConsent"/>, <see cref="global::Klaviyo.Models.NoPushMarketingConsent"/>, <see cref="global::Klaviyo.Models.NoSMSMarketingConsent"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProfileMarketingConsentCondition_consent : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.HasEmailMarketingConsent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.HasEmailMarketingConsent? HasEmailMarketingConsent { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.HasEmailMarketingConsent HasEmailMarketingConsent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.HasPushMarketingConsent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.HasPushMarketingConsent? HasPushMarketingConsent { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.HasPushMarketingConsent HasPushMarketingConsent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.HasSMSMarketingConsent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.HasSMSMarketingConsent? HasSMSMarketingConsent { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.HasSMSMarketingConsent HasSMSMarketingConsent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.NoEmailMarketingConsent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.NoEmailMarketingConsent? NoEmailMarketingConsent { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.NoEmailMarketingConsent NoEmailMarketingConsent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.NoPushMarketingConsent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.NoPushMarketingConsent? NoPushMarketingConsent { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.NoPushMarketingConsent NoPushMarketingConsent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.NoSMSMarketingConsent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.NoSMSMarketingConsent? NoSMSMarketingConsent { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.NoSMSMarketingConsent NoSMSMarketingConsent { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Klaviyo.Models.ProfileMarketingConsentCondition.ProfileMarketingConsentCondition_consent"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Klaviyo.Models.ProfileMarketingConsentCondition.ProfileMarketingConsentCondition_consent CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Klaviyo.Models.ProfileMarketingConsentCondition.ProfileMarketingConsentCondition_consent();
                if("HasEmailMarketingConsent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.HasEmailMarketingConsent = new global::Klaviyo.Models.HasEmailMarketingConsent();
                }
                else if("HasPushMarketingConsent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.HasPushMarketingConsent = new global::Klaviyo.Models.HasPushMarketingConsent();
                }
                else if("HasSMSMarketingConsent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.HasSMSMarketingConsent = new global::Klaviyo.Models.HasSMSMarketingConsent();
                }
                else if("NoEmailMarketingConsent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.NoEmailMarketingConsent = new global::Klaviyo.Models.NoEmailMarketingConsent();
                }
                else if("NoPushMarketingConsent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.NoPushMarketingConsent = new global::Klaviyo.Models.NoPushMarketingConsent();
                }
                else if("NoSMSMarketingConsent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.NoSMSMarketingConsent = new global::Klaviyo.Models.NoSMSMarketingConsent();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(HasEmailMarketingConsent != null)
                {
                    return HasEmailMarketingConsent.GetFieldDeserializers();
                }
                else if(HasPushMarketingConsent != null)
                {
                    return HasPushMarketingConsent.GetFieldDeserializers();
                }
                else if(HasSMSMarketingConsent != null)
                {
                    return HasSMSMarketingConsent.GetFieldDeserializers();
                }
                else if(NoEmailMarketingConsent != null)
                {
                    return NoEmailMarketingConsent.GetFieldDeserializers();
                }
                else if(NoPushMarketingConsent != null)
                {
                    return NoPushMarketingConsent.GetFieldDeserializers();
                }
                else if(NoSMSMarketingConsent != null)
                {
                    return NoSMSMarketingConsent.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(HasEmailMarketingConsent != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.HasEmailMarketingConsent>(null, HasEmailMarketingConsent);
                }
                else if(HasPushMarketingConsent != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.HasPushMarketingConsent>(null, HasPushMarketingConsent);
                }
                else if(HasSMSMarketingConsent != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.HasSMSMarketingConsent>(null, HasSMSMarketingConsent);
                }
                else if(NoEmailMarketingConsent != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.NoEmailMarketingConsent>(null, NoEmailMarketingConsent);
                }
                else if(NoPushMarketingConsent != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.NoPushMarketingConsent>(null, NoPushMarketingConsent);
                }
                else if(NoSMSMarketingConsent != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.NoSMSMarketingConsent>(null, NoSMSMarketingConsent);
                }
            }
        }
    }
}
#pragma warning restore CS0618
