// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Klaviyo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SegmentsProfileMetricCondition : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Measurements for profile metrics.</summary>
        public global::Klaviyo.Models.SegmentsProfileMetricCondition_measurement? Measurement { get; set; }
        /// <summary>The measurement_filter property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.NumericOperatorFilter? MeasurementFilter { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.NumericOperatorFilter MeasurementFilter { get; set; }
#endif
        /// <summary>The metric_filters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Klaviyo.Models.ProfileMetricPropertyFilter>? MetricFilters { get; set; }
#nullable restore
#else
        public List<global::Klaviyo.Models.ProfileMetricPropertyFilter> MetricFilters { get; set; }
#endif
        /// <summary>The metric_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetricId { get; set; }
#nullable restore
#else
        public string MetricId { get; set; }
#endif
        /// <summary>The timeframe_filter property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.SegmentsProfileMetricCondition.SegmentsProfileMetricCondition_timeframe_filter? TimeframeFilter { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.SegmentsProfileMetricCondition.SegmentsProfileMetricCondition_timeframe_filter TimeframeFilter { get; set; }
#endif
        /// <summary>The type property</summary>
        public global::Klaviyo.Models.ProfileMetricEnum? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Klaviyo.Models.SegmentsProfileMetricCondition"/> and sets the default values.
        /// </summary>
        public SegmentsProfileMetricCondition()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Klaviyo.Models.SegmentsProfileMetricCondition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Klaviyo.Models.SegmentsProfileMetricCondition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Klaviyo.Models.SegmentsProfileMetricCondition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "measurement", n => { Measurement = n.GetEnumValue<global::Klaviyo.Models.SegmentsProfileMetricCondition_measurement>(); } },
                { "measurement_filter", n => { MeasurementFilter = n.GetObjectValue<global::Klaviyo.Models.NumericOperatorFilter>(global::Klaviyo.Models.NumericOperatorFilter.CreateFromDiscriminatorValue); } },
                { "metric_filters", n => { MetricFilters = n.GetCollectionOfObjectValues<global::Klaviyo.Models.ProfileMetricPropertyFilter>(global::Klaviyo.Models.ProfileMetricPropertyFilter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "metric_id", n => { MetricId = n.GetStringValue(); } },
                { "timeframe_filter", n => { TimeframeFilter = n.GetObjectValue<global::Klaviyo.Models.SegmentsProfileMetricCondition.SegmentsProfileMetricCondition_timeframe_filter>(global::Klaviyo.Models.SegmentsProfileMetricCondition.SegmentsProfileMetricCondition_timeframe_filter.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Klaviyo.Models.ProfileMetricEnum>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Klaviyo.Models.SegmentsProfileMetricCondition_measurement>("measurement", Measurement);
            writer.WriteObjectValue<global::Klaviyo.Models.NumericOperatorFilter>("measurement_filter", MeasurementFilter);
            writer.WriteCollectionOfObjectValues<global::Klaviyo.Models.ProfileMetricPropertyFilter>("metric_filters", MetricFilters);
            writer.WriteStringValue("metric_id", MetricId);
            writer.WriteObjectValue<global::Klaviyo.Models.SegmentsProfileMetricCondition.SegmentsProfileMetricCondition_timeframe_filter>("timeframe_filter", TimeframeFilter);
            writer.WriteEnumValue<global::Klaviyo.Models.ProfileMetricEnum>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Klaviyo.Models.AlltimeDateFilter"/>, <see cref="global::Klaviyo.Models.RelativeAnniversaryDateFilter"/>, <see cref="global::Klaviyo.Models.RelativeDateOperatorBaseFilter"/>, <see cref="global::Klaviyo.Models.RelativeDateRangeFilter"/>, <see cref="global::Klaviyo.Models.StaticDateFilter"/>, <see cref="global::Klaviyo.Models.StaticDateRangeFilter"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SegmentsProfileMetricCondition_timeframe_filter : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.AlltimeDateFilter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.AlltimeDateFilter? AlltimeDateFilter { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.AlltimeDateFilter AlltimeDateFilter { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RelativeAnniversaryDateFilter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RelativeAnniversaryDateFilter? RelativeAnniversaryDateFilter { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RelativeAnniversaryDateFilter RelativeAnniversaryDateFilter { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RelativeDateOperatorBaseFilter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RelativeDateOperatorBaseFilter? RelativeDateOperatorBaseFilter { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RelativeDateOperatorBaseFilter RelativeDateOperatorBaseFilter { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.RelativeDateRangeFilter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.RelativeDateRangeFilter? RelativeDateRangeFilter { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.RelativeDateRangeFilter RelativeDateRangeFilter { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.StaticDateFilter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.StaticDateFilter? StaticDateFilter { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.StaticDateFilter StaticDateFilter { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.StaticDateRangeFilter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.StaticDateRangeFilter? StaticDateRangeFilter { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.StaticDateRangeFilter StaticDateRangeFilter { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Klaviyo.Models.SegmentsProfileMetricCondition.SegmentsProfileMetricCondition_timeframe_filter"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Klaviyo.Models.SegmentsProfileMetricCondition.SegmentsProfileMetricCondition_timeframe_filter CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Klaviyo.Models.SegmentsProfileMetricCondition.SegmentsProfileMetricCondition_timeframe_filter();
                if("AlltimeDateFilter".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.AlltimeDateFilter = new global::Klaviyo.Models.AlltimeDateFilter();
                }
                else if("RelativeAnniversaryDateFilter".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RelativeAnniversaryDateFilter = new global::Klaviyo.Models.RelativeAnniversaryDateFilter();
                }
                else if("RelativeDateOperatorBaseFilter".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RelativeDateOperatorBaseFilter = new global::Klaviyo.Models.RelativeDateOperatorBaseFilter();
                }
                else if("RelativeDateRangeFilter".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RelativeDateRangeFilter = new global::Klaviyo.Models.RelativeDateRangeFilter();
                }
                else if("StaticDateFilter".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.StaticDateFilter = new global::Klaviyo.Models.StaticDateFilter();
                }
                else if("StaticDateRangeFilter".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.StaticDateRangeFilter = new global::Klaviyo.Models.StaticDateRangeFilter();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(AlltimeDateFilter != null)
                {
                    return AlltimeDateFilter.GetFieldDeserializers();
                }
                else if(RelativeAnniversaryDateFilter != null)
                {
                    return RelativeAnniversaryDateFilter.GetFieldDeserializers();
                }
                else if(RelativeDateOperatorBaseFilter != null)
                {
                    return RelativeDateOperatorBaseFilter.GetFieldDeserializers();
                }
                else if(RelativeDateRangeFilter != null)
                {
                    return RelativeDateRangeFilter.GetFieldDeserializers();
                }
                else if(StaticDateFilter != null)
                {
                    return StaticDateFilter.GetFieldDeserializers();
                }
                else if(StaticDateRangeFilter != null)
                {
                    return StaticDateRangeFilter.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(AlltimeDateFilter != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.AlltimeDateFilter>(null, AlltimeDateFilter);
                }
                else if(RelativeAnniversaryDateFilter != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RelativeAnniversaryDateFilter>(null, RelativeAnniversaryDateFilter);
                }
                else if(RelativeDateOperatorBaseFilter != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RelativeDateOperatorBaseFilter>(null, RelativeDateOperatorBaseFilter);
                }
                else if(RelativeDateRangeFilter != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.RelativeDateRangeFilter>(null, RelativeDateRangeFilter);
                }
                else if(StaticDateFilter != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.StaticDateFilter>(null, StaticDateFilter);
                }
                else if(StaticDateRangeFilter != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.StaticDateRangeFilter>(null, StaticDateRangeFilter);
                }
            }
        }
    }
}
#pragma warning restore CS0618
