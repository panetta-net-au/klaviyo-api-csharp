// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Klaviyo.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MobilePushOptions : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Only supported on iOS.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_badge? Badge { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_badge Badge { get; set; }
#endif
        /// <summary>The on_open property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_on_open? OnOpen { get; set; }
#nullable restore
#else
        public global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_on_open OnOpen { get; set; }
#endif
        /// <summary>Only supported on iOS.</summary>
        public bool? PlaySound { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Klaviyo.Models.MobilePushOptions"/> and sets the default values.
        /// </summary>
        public MobilePushOptions()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Klaviyo.Models.MobilePushOptions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Klaviyo.Models.MobilePushOptions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Klaviyo.Models.MobilePushOptions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "badge", n => { Badge = n.GetObjectValue<global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_badge>(global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_badge.CreateFromDiscriminatorValue); } },
                { "on_open", n => { OnOpen = n.GetObjectValue<global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_on_open>(global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_on_open.CreateFromDiscriminatorValue); } },
                { "play_sound", n => { PlaySound = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_badge>("badge", Badge);
            writer.WriteObjectValue<global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_on_open>("on_open", OnOpen);
            writer.WriteBoolValue("play_sound", PlaySound);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Klaviyo.Models.MobilePushBadge"/>, <see cref="global::Klaviyo.Models.MobilePushNoBadge"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MobilePushOptions_badge : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.MobilePushBadge"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.MobilePushBadge? MobilePushBadge { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.MobilePushBadge MobilePushBadge { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.MobilePushNoBadge"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.MobilePushNoBadge? MobilePushNoBadge { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.MobilePushNoBadge MobilePushNoBadge { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_badge"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_badge CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_badge();
                if("MobilePushBadge".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.MobilePushBadge = new global::Klaviyo.Models.MobilePushBadge();
                }
                else if("MobilePushNoBadge".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.MobilePushNoBadge = new global::Klaviyo.Models.MobilePushNoBadge();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(MobilePushBadge != null)
                {
                    return MobilePushBadge.GetFieldDeserializers();
                }
                else if(MobilePushNoBadge != null)
                {
                    return MobilePushNoBadge.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(MobilePushBadge != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.MobilePushBadge>(null, MobilePushBadge);
                }
                else if(MobilePushNoBadge != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.MobilePushNoBadge>(null, MobilePushNoBadge);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Klaviyo.Models.PushOnOpenApp"/>, <see cref="global::Klaviyo.Models.PushOnOpenDeepLink"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MobilePushOptions_on_open : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.PushOnOpenApp"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.PushOnOpenApp? PushOnOpenApp { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.PushOnOpenApp PushOnOpenApp { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Klaviyo.Models.PushOnOpenDeepLink"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Klaviyo.Models.PushOnOpenDeepLink? PushOnOpenDeepLink { get; set; }
#nullable restore
#else
            public global::Klaviyo.Models.PushOnOpenDeepLink PushOnOpenDeepLink { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_on_open"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_on_open CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Klaviyo.Models.MobilePushOptions.MobilePushOptions_on_open();
                if("PushOnOpenApp".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PushOnOpenApp = new global::Klaviyo.Models.PushOnOpenApp();
                }
                else if("PushOnOpenDeepLink".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PushOnOpenDeepLink = new global::Klaviyo.Models.PushOnOpenDeepLink();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PushOnOpenApp != null)
                {
                    return PushOnOpenApp.GetFieldDeserializers();
                }
                else if(PushOnOpenDeepLink != null)
                {
                    return PushOnOpenDeepLink.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(PushOnOpenApp != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.PushOnOpenApp>(null, PushOnOpenApp);
                }
                else if(PushOnOpenDeepLink != null)
                {
                    writer.WriteObjectValue<global::Klaviyo.Models.PushOnOpenDeepLink>(null, PushOnOpenDeepLink);
                }
            }
        }
    }
}
#pragma warning restore CS0618
